import os
import time
import datetime
import pytz
from logzero import logger
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.chrome.service import Service

class MoneyForward:
    def __init__(self, mf_id=None, mf_pass=None):
        self.mf_id = mf_id or os.getenv("MF_ID")
        self.mf_pass = mf_pass or os.getenv("MF_PASS")
        self.depo_keys = ["name", "balance", "institution"]
        self.eq_keys = ["code", "name", "owned_number", "get_value", "current_value", "valuation", "change_previousday", "valuation_profitloss", "valuation_profitloss_ratio", "institution"]
        self.mf_keys = ["name", "owned_number", "get_value", "current_value", "valuation", "change_previousday", "valuation_profitloss", "valuation_profitloss_ratio", "institution"]
        self.pns_keys = ["name", "get_value", "current_value", "valuation_profitloss", "valuation_profitloss_ratio", "acquisition_date"]
        self.po_keys = ["name", "kind", "point", "rate", "current_value", "institution"]
        self.driver = None
        self.wait = None

    def init(self):
        """Initialize Selenium WebDriver."""
        logger.info("Initializing Selenium WebDriver...")
        chrome_options = webdriver.ChromeOptions()
        chrome_options.binary_location = "/usr/bin/chromium"
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=800x1000")
        chrome_options.add_argument("--disable-application-cache")
        chrome_options.add_argument("--disable-infobars")
        chrome_options.add_argument("--hide-scrollbars")
        chrome_options.add_argument("--lang=ja-JP")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--blink-settings=imagesEnabled=false")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36")

        service = Service("/usr/bin/chromedriver")
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        self.driver.implicitly_wait(10)
        logger.info("Selenium WebDriver initialized.")

    def login(self):
        """Log in to the MoneyForward website."""
        # self.driver.execute_script("window.open()")
        self.driver.get("https://ssnb.x.moneyforward.com/users/sign_in")

        # メールアドレス入力
        email_input = WebDriverWait(self.driver, 20).until(
            ec.presence_of_element_located((By.ID, "sign_in_session_service_email"))
        )
        email_input.send_keys(self.mf_id)
        
        # パスワード入力
        password_input = self.driver.find_element(By.ID, "sign_in_session_service_password")
        password_input.send_keys(self.mf_pass)
        
        # ログインボタンクリック
        login_button = WebDriverWait(self.driver, 20).until(
            ec.element_to_be_clickable((By.ID, "login-btn-sumit"))
        )
        login_button.click()

    def portfolio(self):
        """Retrieve portfolio data from MoneyForward."""
        self.driver.get("https://ssnb.x.moneyforward.com/bs/portfolio")
        self.wait_until_element_present((By.TAG_NAME, "body"), 10)
        
        asset_data = {
            "depo": self._extract_table_data('//*[@id="portfolio_det_depo"]/section/table/tbody/tr', self.depo_keys),
            "eq": self._extract_table_data('//*[@id="portfolio_det_eq"]/table/tbody/tr', self.eq_keys),
            "mf": self._extract_table_data('//*[@id="portfolio_det_mf"]/table/tbody/tr', self.mf_keys),
            "pns": self._extract_table_data('//*[@id="portfolio_det_pns"]/table/tbody/tr', self.pns_keys),
            "po": self._extract_table_data('//*[@id="portfolio_det_po"]/table/tbody/tr', self.po_keys)
        }
        return asset_data

    def _extract_table_data(self, xpath, keys):
        """Extract data from a table given an XPath and a set of keys."""
        elements = self.driver.find_elements(By.XPATH, xpath)
        data = {}
        for row in elements:
            cells = row.find_elements(By.TAG_NAME, "td")
            name = cells[0].text
            if name not in data:
                data[name] = {}
            for idx, key in enumerate(keys):
                data[name][key] = cells[idx].text if idx < len(cells) else ""
        return data

    def close(self):
        """Close the Selenium WebDriver."""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("WebDriver closed successfully.")
            except Exception as e:
                logger.warning(f"Error closing WebDriver: {e}")

    def _send_to_element(self, xpath, keys):
        """Send keys to an input element located by XPath."""
        try:
            element = self.driver.find_element(By.XPATH, xpath)
            element.clear()
            logger.debug(f"Sending keys to {xpath}")
            element.send_keys(keys)
        except Exception as e:
            logger.error(f"Failed to send keys to {xpath}: {e}")

    def wait_until_element_present(self, xpath, timeout):
        """Wait until the element located by XPath is present."""
        try:
            self.wait.until(ec.presence_of_element_located((By.XPATH, xpath)))
        except Exception as e:
            logger.error(f"Error waiting for element {xpath}: {e}")

